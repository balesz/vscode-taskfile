{
	"$schema": "https://json-schema.org/draft-06/schema",
	"anyOf": [
		{
			"title": "Taskfile v2.0",
			"type": "object",
			"properties": {
				"version": {
					"anyOf": [
						{"type": "number", "enum": [2, 2.8]},
						{"type": "string", "enum": ["2", "2.8"]}
					]
				},
				"expansions": {
					"description": "Variables are expanded 2 times by default. You can change that by setting this option. Change that will be necessary if you compose many variables together",
					"type": "number"
				},
				"output": {
					"description": "Defines how the STDOUT and STDERR are printed when running tasks in parallel. The interleaved output prints lines in real time (default). The group output will print the entire output of a command once, after it finishes, so you wonâ€™t have live feedback for commands that take a long time to run. The prefix output will prefix every line printed by a command with [task-name] as the prefix, but you can customize the prefix for a command with the prefix: attribute.",
					"type": "string",
					"enum": ["interleaved", "group", "prefixed"]
				},
				"includes": {
					"description": "Imports other tasks from the provided taskfile. The tasks described in the given Taskfiles will be available with the informed namespace.",
					"type": "object",
					"additionalProperties": {"type": "string"}
				},
				"vars": {
					"description": "Declare variables globally",
					"$ref": "#/definitions/2.8/vars"
				},
				"tasks": {
					"description": "Defines your tasks",
					"$ref": "#/definitions/2.8/tasks"
				},
				"silent": {
					"description": "Silent mode disables echoing of commands for all tasks",
					"type": "boolean"
				}
			}
		}
	],
	"definitions": {
		"2.8": {
			"vars": {
				"type": "object"
			},
			"tasks": {
				"type": "object",
				"additionalProperties": {"$ref": "#/definitions/2.8/task"}
			},
			"task": {
				"type": "object",
				"properties": {
					"cmds": {
						"description": "A list of commands for this task",
						"$ref": "#/definitions/2.8/cmds"
					},
					"deps": {
						"description": "Declaring tasks here that shoul run automatically before this task",
						"type": "array", "items": {"type": "string"}
					},
					"desc": {
						"description": "Provides a description for this task. Used by the --list/-l flag",
						"type": "string"
					},
					"summary": {
						"description": "Provides a summary for this task. Used by the --summary flag",
						"type": "string"
					},
					"sources": {
						"description": "List the source files for this task. Will be used to prevent running the task again if nothing changed. Can be a file of a file pattern.",
						"type": "array",
						"items": {"type": "string"}
					},
					"generates": {
						"description": "List the files generated by this task. Will be used to prevent running the task again if nothing changed. Can be a file of a file pattern.",
						"type": "array",
						"items": {"type": "string"}
					},
					"status": {
						"description": "Define a sequence of tests as status of this task. If no error is returned (exit status 0), the task is considered up-to-date",
						"type": "array",
						"items": {"type": "string"}
					},
					"preconditions": {
						"description": "Defines a list of conditions to be true for the task to run",
						"type": "array",
						"items": {"$ref": "#/definitions/2.8/precondition"}
					},
					"dir": {
						"description": "Defines where the task will run. Defaults to the directory of the Taskfile",
						"type": "string"
					},
					"silent": {
						"description": "Silent mode disables echoing of commands before Task runs it",
						"type": "boolean"
					},
					"vars": {
						"description": "Declare variables for this task",
						"$ref": "#/definitions/2.8/vars"
					},
					"env": {
						"description": "Set custom environment variables for this task",
						"$ref": "#/definitions/2.8/vars"
					},
					"method": {
						"description": "Defines which method is used to check the task is up-to-date. timestamp will compare the timestamp of the sources and generates files. checksum will check the checksum (You will probably want to ignore the .task folder in your .gitignore file). none skips any validation and always run the task",
						"type": "string",
						"enum": ["none", "checksum", "timestamp"]
					},
					"prefix": {
						"description": "Defines a string to prefix the output of tasks running in parallel. Only used when the output mode is prefix",
						"type": "string"
					},
					"ignore_error": {
						"description": "Prevent Task from aborting the execution of tasks even after receiving a statuc code of 1",
						"type": "boolean"
					}
				}
			},
			"cmds": {"type": "array", "items": {"$ref": "#/definitions/2.8/cmd"}},
			"cmd": {
				"anyOf": [
					{"type": "string"},
					{"$ref": "#/definitions/2.8/task_call"}
				]
			},
			"task_call": {
				"type": "object",
				"properties": {
					"task": {
						"description": "Name of the task to run",
						"type": "string"
					},
					"vars": {
						"description": "Values passed to the task called",
						"$ref": "#/definitions/2.8/vars"
					}
				}
			},
			"precondition": {
				"anyOf": [
					{"type": "string"},
					{"$ref": "#/definitions/2.8/precondition_obj"}
				]
			},
			"precondition_obj": {
				"type": "object",
				"properties": {
					"sh": {
						"description": "Command to run. If that command returns 1, the condition will fail",
						"type": "string"
					},
					"msg": {
						"description": "Failure message to display when the condition fails",
						"type": "string"
					}
				}
			}
		}
	}
}